{"ast":null,"code":"var _jsxFileName = \"/Users/choeunyoung/Desktop/goorm-react/raect-context-app/client/src/context/OrderContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useMemo, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pricePerItem = {\n  products: 1000,\n  options: 500\n};\nfunction calculateSubtotal(orderType, orderCounts) {\n  let optionCount = 0;\n  for (const count of orderCounts[orderType].values()) {\n    optionCount += count;\n  }\n  return optionCount * pricePerItem[orderType];\n}\n// Context 생성\nexport const OrderContext = /*#__PURE__*/createContext();\n\n//\nexport function OrderContextProvider(props) {\n  _s();\n  const [orderCounts, setOrderCounts] = useState({\n    products: new Map(),\n    options: new Map()\n  });\n  const [totals, setTotals] = useState({\n    products: 0,\n    options: 0,\n    total: 0\n  });\n  useEffect(() => {\n    const productsTotal = calculateSubtotal(\"products\", orderCounts);\n    const optionsTotal = calculateSubtotal(\"options\", orderCounts);\n    const total = productsTotal + optionsTotal;\n    setTotals({\n      products: productsTotal,\n      options: optionsTotal,\n      total: total\n    });\n  }, [orderCounts]);\n  const value = useMemo(() => {\n    function updateItemCount(itemName, newItemCount, optionType) {\n      const oldOrderMap = orderCounts[optionType];\n      const newOrderMap = new Map(oldOrderMap);\n      newOrderMap.set(itemName, parseInt(newItemCount));\n      const newOrderCounts = {\n        ...orderCounts\n      };\n      newOrderCounts[optionType] = newOrderMap;\n      setOrderCounts(newOrderCounts);\n    }\n    return [{\n      ...orderCounts,\n      totals\n    }, updateItemCount];\n  }, [orderCounts, totals]);\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: value,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n}\n_s(OrderContextProvider, \"oaKlyRriwpw6ANZSsGNe1lBZ8pE=\");\n_c = OrderContextProvider;\nvar _c;\n$RefreshReg$(_c, \"OrderContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useMemo","useState","jsxDEV","_jsxDEV","pricePerItem","products","options","calculateSubtotal","orderType","orderCounts","optionCount","count","values","OrderContext","OrderContextProvider","props","_s","setOrderCounts","Map","totals","setTotals","total","productsTotal","optionsTotal","value","updateItemCount","itemName","newItemCount","optionType","oldOrderMap","newOrderMap","set","parseInt","newOrderCounts","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/choeunyoung/Desktop/goorm-react/raect-context-app/client/src/context/OrderContext.js"],"sourcesContent":["import { createContext, useEffect, useMemo, useState } from \"react\";\nconst pricePerItem = {\n  products: 1000,\n  options: 500,\n};\n\nfunction calculateSubtotal(orderType, orderCounts) {\n  let optionCount = 0;\n\n  for (const count of orderCounts[orderType].values()) {\n    optionCount += count;\n  }\n  return optionCount * pricePerItem[orderType];\n}\n// Context 생성\nexport const OrderContext = createContext();\n\n//\nexport function OrderContextProvider(props) {\n  const [orderCounts, setOrderCounts] = useState({\n    products: new Map(),\n    options: new Map(),\n  });\n\n  const [totals, setTotals] = useState({\n    products: 0,\n    options: 0,\n    total: 0,\n  });\n\n  useEffect(() => {\n    const productsTotal = calculateSubtotal(\"products\", orderCounts);\n    const optionsTotal = calculateSubtotal(\"options\", orderCounts);\n    const total = productsTotal + optionsTotal;\n    setTotals({\n      products: productsTotal,\n      options: optionsTotal,\n      total: total,\n    });\n  }, [orderCounts]);\n\n  const value = useMemo(() => {\n    function updateItemCount(itemName, newItemCount, optionType) {\n      const oldOrderMap = orderCounts[optionType];\n      const newOrderMap = new Map(oldOrderMap);\n\n      newOrderMap.set(itemName, parseInt(newItemCount));\n\n      const newOrderCounts = { ...orderCounts };\n      newOrderCounts[optionType] = newOrderMap;\n\n      setOrderCounts(newOrderCounts);\n    }\n\n    return [{ ...orderCounts, totals }, updateItemCount];\n  }, [orderCounts, totals]);\n\n  return <OrderContext.Provider value={value} {...props} />;\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACpE,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,IAAI;EACdC,OAAO,EAAE;AACX,CAAC;AAED,SAASC,iBAAiBA,CAACC,SAAS,EAAEC,WAAW,EAAE;EACjD,IAAIC,WAAW,GAAG,CAAC;EAEnB,KAAK,MAAMC,KAAK,IAAIF,WAAW,CAACD,SAAS,CAAC,CAACI,MAAM,CAAC,CAAC,EAAE;IACnDF,WAAW,IAAIC,KAAK;EACtB;EACA,OAAOD,WAAW,GAAGN,YAAY,CAACI,SAAS,CAAC;AAC9C;AACA;AACA,OAAO,MAAMK,YAAY,gBAAGf,aAAa,CAAC,CAAC;;AAE3C;AACA,OAAO,SAASgB,oBAAoBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC1C,MAAM,CAACP,WAAW,EAAEQ,cAAc,CAAC,GAAGhB,QAAQ,CAAC;IAC7CI,QAAQ,EAAE,IAAIa,GAAG,CAAC,CAAC;IACnBZ,OAAO,EAAE,IAAIY,GAAG,CAAC;EACnB,CAAC,CAAC;EAEF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC;IACnCI,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAE,CAAC;IACVe,KAAK,EAAE;EACT,CAAC,CAAC;EAEFtB,SAAS,CAAC,MAAM;IACd,MAAMuB,aAAa,GAAGf,iBAAiB,CAAC,UAAU,EAAEE,WAAW,CAAC;IAChE,MAAMc,YAAY,GAAGhB,iBAAiB,CAAC,SAAS,EAAEE,WAAW,CAAC;IAC9D,MAAMY,KAAK,GAAGC,aAAa,GAAGC,YAAY;IAC1CH,SAAS,CAAC;MACRf,QAAQ,EAAEiB,aAAa;MACvBhB,OAAO,EAAEiB,YAAY;MACrBF,KAAK,EAAEA;IACT,CAAC,CAAC;EACJ,CAAC,EAAE,CAACZ,WAAW,CAAC,CAAC;EAEjB,MAAMe,KAAK,GAAGxB,OAAO,CAAC,MAAM;IAC1B,SAASyB,eAAeA,CAACC,QAAQ,EAAEC,YAAY,EAAEC,UAAU,EAAE;MAC3D,MAAMC,WAAW,GAAGpB,WAAW,CAACmB,UAAU,CAAC;MAC3C,MAAME,WAAW,GAAG,IAAIZ,GAAG,CAACW,WAAW,CAAC;MAExCC,WAAW,CAACC,GAAG,CAACL,QAAQ,EAAEM,QAAQ,CAACL,YAAY,CAAC,CAAC;MAEjD,MAAMM,cAAc,GAAG;QAAE,GAAGxB;MAAY,CAAC;MACzCwB,cAAc,CAACL,UAAU,CAAC,GAAGE,WAAW;MAExCb,cAAc,CAACgB,cAAc,CAAC;IAChC;IAEA,OAAO,CAAC;MAAE,GAAGxB,WAAW;MAAEU;IAAO,CAAC,EAAEM,eAAe,CAAC;EACtD,CAAC,EAAE,CAAChB,WAAW,EAAEU,MAAM,CAAC,CAAC;EAEzB,oBAAOhB,OAAA,CAACU,YAAY,CAACqB,QAAQ;IAACV,KAAK,EAAEA,KAAM;IAAA,GAAKT;EAAK;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAC3D;AAACtB,EAAA,CAxCeF,oBAAoB;AAAAyB,EAAA,GAApBzB,oBAAoB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}